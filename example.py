# AUTOGENERATED! DO NOT EDIT! File to edit: Untitled.ipynb.

# %% auto 0
__all__ = []

# %% Untitled.ipynb 0
from datetime import datetime
import streamlit as st
from streamlit_jupyter import StreamlitPatcher, tqdm
import pandas as pd
import numpy as np
import requests
from geopy.distance import geodesic
from geopy.geocoders import Nominatim
import time
import calendar
import matplotlib.pyplot as plt
import folium
from streamlit_folium import folium_static

# %% Untitled.ipynb 1
c1, c2 = st.columns(2)
# Create a Streamlit file uploader
with c1:
    schedule = st.file_uploader("Upload Schedule as csv", type="csv")
with c2:
    travel_period = st.file_uploader("Upload travel period as csv", type="csv")


# Check if a file was uploaded
if schedule is not None:
    # Read the CSV file into a pandas DataFrame
    df = pd.read_csv(schedule)
    
    # # SPLIT
    split_data = df['Location'].str.split(",", expand=True)

    if len(split_data.columns) == 3:
        df[['City', 'State', 'Country']] = split_data
    else:
        # If split_data has two columns (City, State), add 'NaN' values for 'Country'
        df['City'] = split_data[0]
        df['State'] = split_data[1]
        df['Country'] = np.nan
     
    # # ADD DISTANCE
    geolocator = Nominatim(user_agent="my_geocoder")

    city1 = "Great Falls"

    def calculate_distance(city2):
        away = geolocator.geocode(city2)
        home = geolocator.geocode(city1)

        if home and away:
            coordinates1 = (home.latitude, home.longitude)
            coordinates2 = (away.latitude, away.longitude)
            distance = (geodesic(coordinates1, coordinates2).miles) * 1.2
            return round(distance, 2)
        else:
            return None

    # Apply function to calculate distance and create the 'Distance' column
    df['Distance in mile'] = df['Location'].apply(calculate_distance)

    time.sleep(2)
    
    
    # # PRINT
    with st.expander("See DataFrame"):
        # Display the DataFrame
        st.write("Uploaded DataFrame:")
        st.dataframe(df)
        
        
    # # GAME COUNT
    home = df[df["Distance in mile"] == 0.0]
    away = df[df["Distance in mile"] != 0.0]
    
    home_count = len(home)
    away_count = len(away)
    total_games = home_count + away_count
    
    labels = [f'Home Games: {home_count}', f'Away Games: {away_count}']
    sizes = [home_count, away_count]
    colors = ['blue', 'orange']

    # Create a pie chart
    fig, ax = plt.subplots()
    ax.pie(sizes, labels=labels, colors=colors, autopct='%1.2f%%', startangle=140)

    # Equal aspect ratio ensures that pie is drawn as a circle
    ax.axis('equal')
    ax.set_title('Home Games vs Away Games')

    # Annotate the total games count below the pie chart
    ax.text(0.5, 0, f'Total Games: {total_games}', fontsize=12, color='black',
             fontweight='bold', ha='center', va='center', transform=ax.transAxes)

    # Display the plot using st.pyplot
    st.pyplot(fig)
    
    # # CITY
    city_most_game_away = df[df['City'] != "Great Falls"]
    city_most_game_away = city_most_game_away['City'].value_counts().reset_index()
    city_most_game_away.columns = ['City', 'Count']
    city_most_game_away
    
    # List of cities
    cities = df['Location']

    # Geocoder instance
    geolocator = Nominatim(user_agent="my_geocoder")
    # Get coordinates for cities
    coordinates = []
    for city in cities:
        location = geolocator.geocode(city)
        if location:
            coordinates.append((location.latitude, location.longitude))

    # Calculate mean coordinates
    mean_latitude = sum(lat for lat, lon in coordinates) / len(coordinates)
    mean_longitude = sum(lon for lat, lon in coordinates) / len(coordinates)

    # Create a map centered at the mean coordinates
    m = folium.Map(location=[mean_latitude, mean_longitude], zoom_start=4, min_zoom=4)  # Adjust zoom level as needed

    # Plot markers for cities on the map
    for city, (lat, lon) in zip(cities, coordinates):
        popup_text = f"<b>{city}</b>"  # Customize the popup content here
        folium.Marker(location=[lat, lon], tooltip=popup_text).add_to(m)

    # Display the map
    folium_static(m)
    
with st.sidebar:
    fall_start = st.date_input("Fall start date", datetime.today())
    # Convert the selected date to the desired format
    formatted_fall_start = pd.to_datetime(fall_start)
    
    
    fall_end = st.date_input("Fall end date", datetime.today())
    # Convert the selected date to the desired format
    formatted_fall_end = pd.to_datetime(fall_end)

    
    spring_start = st.date_input("Spring start date", datetime.today())
    # Convert the selected date to the desired format
    formatted_spring_start = pd.to_datetime(spring_start)

    
    spring_end = st.date_input("Spring end date", datetime.today())
    # Convert the selected date to the desired format
    formatted_spring_end = pd.to_datetime(spring_end)
    
    
    
if travel_period is not None:
    df = pd.read_csv(travel_period)
    
    st.write("Uploaded DataFrame:")
    st.dataframe(df)
    
    # Filter the away_df DataFrame between the specified date ranges
    df['AwayDate'] = pd.to_datetime(df['AwayDate'])
    days_traveled_semester = df[(df['AwayDate'] >= formatted_fall_start) & (df['AwayDate'] <= formatted_fall_end) |
                         (df['AwayDate'] >= formatted_spring_start) & (df['AwayDate'] <= formatted_spring_end)]


    # Function to convert weekday number to weekday name
    def get_weekday_name(date):
        return calendar.day_name[date.weekday()]


    # Add a new column 'Weekday' containing the weekday names to the copied DataFrame
    days_traveled_semester['Weekday'] = days_traveled_semester['AwayDate'].apply(get_weekday_name)
    
    monday_to_thursday_travel = days_traveled_semester[~days_traveled_semester['Weekday'].isin(['Friday', 'Saturday', 'Sunday'])].shape[0]
    friday_travel = days_traveled_semester[~days_traveled_semester['Weekday'].isin(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Saturday', 'Sunday'])].shape[0]
    weekend_travel = days_traveled_semester[~days_traveled_semester['Weekday'].isin(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'])].shape[0]
    class_day_travel = monday_to_thursday_travel + friday_travel
    days_traveled_break = len(df) - len(days_traveled_semester)
    
    ## NUMBER OF DAYS TRAVELED
    breaks = days_traveled_break
    semesters = len(days_traveled_semester)
    total_travel = breaks + semesters

    labels = [f'Number of days traveled \n during breaks: {breaks}', f'Number of days traveled \nduring semester: {semesters}']
    sizes = [breaks, semesters]
    colors = ['blue', 'orange']

    # Create a pie chart
    fig, ax = plt.subplots()
    ax.pie(sizes, labels=labels, colors=colors, autopct='%1.2f%%', startangle=140)

    # Equal aspect ratio ensures that pie is drawn as a circle
    ax.axis('equal')
    ax.set_title('Men\'s Basketball number of days travel')

    # Annotate the total games count below the pie chart
    ax.text(0.5, 0, f'Total days traveled: {total_travel} days', fontsize=12, color='black',
             fontweight='bold', ha='center', va='center', transform=plt.gca().transAxes)

    # Display the plot in Streamlit
    st.pyplot(fig)
    
    ## TRAVEL DURING SEMESTER
    class_day = class_day_travel
    weekend = weekend_travel
    total_travel = len(days_traveled_semester)

    labels = [f'Number of class days traveled: {class_day}', f'Number of days \n on weekend traveled: {weekend}']
    sizes = [class_day, weekend]
    colors = ['blue', 'orange']

    # Create a pie chart
    fig, ax = plt.subplots()
    ax.pie(sizes, labels=labels, colors=colors, autopct='%1.2f%%', startangle=140)

    # Equal aspect ratio ensures that pie is drawn as a circle
    ax.axis('equal')
    ax.set_title('Men\'s Basketball days traveled during semesters', pad=30)

    # Annotate the total games count below the pie chart
    ax.text(0.5, -0.2, f'Total days traveled during semesters: {total_travel} days', fontsize=12, color='black',
             fontweight='bold', ha='center', va='center', transform=plt.gca().transAxes)

    # Display the plot in Streamlit
    st.pyplot(fig)
    
    
    ## NUMBER OF CLASS DAY TRAVELED
    friday = friday_travel
    mon_to_thu = monday_to_thursday_travel
    total_class_days = class_day_travel

    labels = [f'Number of days traveled \n that occurs on Friday: {friday}', f'Number of days traveled \n that occurs Monday-Thursday: {mon_to_thu}']
    sizes = [friday, mon_to_thu]
    colors = ['blue', 'orange']

    # Create a pie chart
    fig, ax = plt.subplots()
    ax.pie(sizes, labels=labels, colors=colors, autopct='%1.2f%%', startangle=140)

    # Equal aspect ratio ensures that pie is drawn as a circle
    ax.axis('equal')
    ax.set_title('Men\'s Basketball number of class days travel')

    # Annotate the total class days count below the pie chart
    ax.text(0.5, 0, f'Total class days traveled: {total_class_days} days', fontsize=12, color='black',
             fontweight='bold', ha='center', va='center', transform=plt.gca().transAxes)

    # Display the plot in Streamlit
    st.pyplot(fig)
